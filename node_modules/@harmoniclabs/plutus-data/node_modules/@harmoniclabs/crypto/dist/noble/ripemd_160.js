"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var e_1, _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RIPEMD160 = void 0;
/**
 * RIPEMD-160 legacy hash function.
 * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html
 * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf
 * @module
 */
var _md_1 = require("./_md.js");
var utils_1 = require("./utils.js");
var Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
var Id = /* @__PURE__ */ new Uint8Array(new Array(16).fill(0).map(function (_, i) { return i; }));
var Pi = /* @__PURE__ */ Id.map(function (i) { return (9 * i + 5) % 16; });
var idxL = [Id];
var idxR = [Pi];
for (var i = 0; i < 4; i++)
    try {
        for (var _b = (e_1 = void 0, __values([idxL, idxR])), _c = _b.next(); !_c.done; _c = _b.next()) {
            var j = _c.value;
            j.push(j[i].map(function (k) { return Rho[k]; }));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
var shifts = /* @__PURE__ */ [
    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],
].map(function (i) { return new Uint8Array(i); });
var shiftsL = /* @__PURE__ */ idxL.map(function (idx, i) { return idx.map(function (j) { return shifts[i][j]; }); });
var shiftsR = /* @__PURE__ */ idxR.map(function (idx, i) { return idx.map(function (j) { return shifts[i][j]; }); });
var Kl = /* @__PURE__ */ new Uint32Array([
    0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,
]);
var Kr = /* @__PURE__ */ new Uint32Array([
    0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,
]);
// It's called f() in spec.
function f(group, x, y, z) {
    if (group === 0)
        return x ^ y ^ z;
    else if (group === 1)
        return (x & y) | (~x & z);
    else if (group === 2)
        return (x | ~y) ^ z;
    else if (group === 3)
        return (x & z) | (y & ~z);
    else
        return x ^ (y | ~z);
}
// Temporary buffer, not used to store anything between runs
var R_BUF = /* @__PURE__ */ new Uint32Array(16);
var RIPEMD160 = /** @class */ (function (_super) {
    __extends(RIPEMD160, _super);
    function RIPEMD160() {
        var _this = _super.call(this, 64, 20, 8, true) || this;
        _this.h0 = 0x67452301 | 0;
        _this.h1 = 0xefcdab89 | 0;
        _this.h2 = 0x98badcfe | 0;
        _this.h3 = 0x10325476 | 0;
        _this.h4 = 0xc3d2e1f0 | 0;
        return _this;
    }
    RIPEMD160.prototype.get = function () {
        var _a = this, h0 = _a.h0, h1 = _a.h1, h2 = _a.h2, h3 = _a.h3, h4 = _a.h4;
        return [h0, h1, h2, h3, h4];
    };
    RIPEMD160.prototype.set = function (h0, h1, h2, h3, h4) {
        this.h0 = h0 | 0;
        this.h1 = h1 | 0;
        this.h2 = h2 | 0;
        this.h3 = h3 | 0;
        this.h4 = h4 | 0;
    };
    RIPEMD160.prototype.process = function (view, offset) {
        for (var i = 0; i < 16; i++, offset += 4)
            R_BUF[i] = view.getUint32(offset, true);
        // prettier-ignore
        var al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
        // Instead of iterating 0 to 80, we split it into 5 groups
        // And use the groups in constants, functions, etc. Much simpler
        for (var group = 0; group < 5; group++) {
            var rGroup = 4 - group;
            var hbl = Kl[group], hbr = Kr[group]; // prettier-ignore
            var rl = idxL[group], rr = idxR[group]; // prettier-ignore
            var sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore
            for (var i = 0; i < 16; i++) {
                var tl = ((0, utils_1.rotl)(al + f(group, bl, cl, dl) + R_BUF[rl[i]] + hbl, sl[i]) + el) | 0;
                al = el, el = dl, dl = (0, utils_1.rotl)(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore
            }
            // 2 loops are 10% faster
            for (var i = 0; i < 16; i++) {
                var tr = ((0, utils_1.rotl)(ar + f(rGroup, br, cr, dr) + R_BUF[rr[i]] + hbr, sr[i]) + er) | 0;
                ar = er, er = dr, dr = (0, utils_1.rotl)(cr, 10) | 0, cr = br, br = tr; // prettier-ignore
            }
        }
        // Add the compressed chunk to the current hash value
        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);
    };
    RIPEMD160.prototype.roundClean = function () {
        R_BUF.fill(0);
    };
    RIPEMD160.prototype.destroy = function () {
        this.destroyed = true;
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0);
    };
    return RIPEMD160;
}(_md_1.HashMD));
exports.RIPEMD160 = RIPEMD160;
/** RIPEMD-160 - a legacy hash function from 1990s. */
var _ripemd160 = /* @__PURE__ */ (0, utils_1.wrapConstructor)(function () { return new RIPEMD160(); });
